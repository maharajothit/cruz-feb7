service: SaaSServerless-UserMgr

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  table:
    user: ${opt:usertable, self:provider.table.user}
    tenant: ${opt:tenanttable, self:provider.table.tenant}
    order: ${opt:ordertable, self:provider.table.order}
    product: ${opt:producttable, self:provider.table.product}
    entity: ${opt:entitytable, self:provider.table.entity}
  configdir:
    local: "../config/"
    dev: "./config/"
    prod: "./config/"
  region: ${self:provider.region}
  authdir: "../authMgr/"
  customauthdir: "../common/"
  orderdir: "../orderMgr/"
  productdir: "../productMgr/"
  sysregdir: "../sysReg/"
  tenantmgrdir: "../tenantMgr/"
  tenantregdir: "../tenantReg/"
  userdir: ""
  libsdir: "../../libs/"
  entitydir: "../entityMgr/"
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 30 #set timeout to 30 seconds
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "cognito-idp:*"
        - "iam:CreatePolicy"
        - "iam:CreateRole"
        - "iam:DeleteRole"
        - "iam:DeletePolicy"
        - "iam:AttachRolePolicy"
        - "iam:DetachRolePolicy"
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "iam:PassRole"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "cognito-identity:*"
      Resource: "*"
  stage: dev
  region: ${opt:region, file(../common/common.yml):${self:custom.stage}.region}
  table:
    user: ${self:custom.stage}-SaaS-user
    tenant: ${self:custom.stage}-SaaS-tenant
    order: ${self:custom.stage}-SaaS-order
    product: ${self:custom.stage}-SaaS-product
    entity: ${self:custom.stage}-SaaS-entity
  environment:
    stage: ${self:custom.stage}
    region: ${self:custom.region}

    USER_TABLE: ${self:custom.table.user}
    TENANT_TABLE: ${self:custom.table.tenant}
    ORDER_TABLE: ${self:custom.table.order}
    PRODUCT_TABLE: ${self:custom.table.product}
    ENTITY_TABLE: ${self:custom.table.entity}

    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-SaaSServerlessApiRestApiId
    apiURL:
      ${file(../common/common.yml):${self:custom.stage}.apiURL, file(../common/common.yml):dev.apiURL}
    PROJECT_NAME:
      ${cf:SaaSServerless-common-${self:custom.stage}.ProjectName,'SaaSServerless'}
    serviceURL:
      ${file(../common/common.yml):${self:custom.stage}.serviceURL, file(../common/common.yml):dev.serviceURL}

    SNS_ROLE_ARN:
      'Fn::ImportValue': ${self:custom.stage}-SaaSServerlessSNSRoleArn

    NODE_CONFIG_DIR: ${self:custom.configdir.${self:custom.stage}}

  # define share ApiGateway
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-SaaSServerlessApiRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-SaaSServerlessApiRestApiRootResourceId

functions:
  - ${file(${self:custom.userdir}userMgr-functions.yml)}
#  - ${file(${self:custom.customauthdir}customAuth-functions.yml)}

resources:
  Resources:
    UserDB:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: tenant_id_key
            AttributeType: "N"
          - AttributeName: id
            AttributeType: S
          # - AttributeName: id_key
          #   AttributeType: "N"
          # - AttributeName: identity_pool_Id
          #   AttributeType: S
          # - AttributeName: user_pool_Id
          #   AttributeType: S
          # - AttributeName: accountName
          #   AttributeType: S
          # - AttributeName: client_id
          #   AttributeType: S
          # - AttributeName: company_name
          #   AttributeType: S
          # - AttributeName: first_name
          #   AttributeType: S
          # - AttributeName: last_name
          #   AttributeType: S
          # - AttributeName: email
          #   AttributeType: S
          # - AttributeName: role
          #   AttributeType: S
          # - AttributeName: sub
          #   AttributeType: S
          # - AttributeName: tier
          #   AttributeType: S
          # - AttributeName: user_name
          #   AttributeType: S
          # - AttributeName: user_alias
          #   AttributeType: S
          # - AttributeName: user_photo_location
          #   AttributeType: S
          # - AttributeName: user_last_login_datetime
          #   AttributeType: S
          # - AttributeName: status
          #   AttributeType: S
          # - AttributeName: status_change_datetime
          #   AttributeType: S
          # - AttributeName: created_datetime
          #   AttributeType: S
          # - AttributeName: created_by_user
          #   AttributeType: S
          # - AttributeName: last_modified_datetime
          #   AttributeType: S
          # - AttributeName: last_modified_by_user
          #   AttributeType: S
          # - AttributeName: marked_for_deletion_datetime
          #   AttributeType: S
          # - AttributeName: marked_for_deletion_by_user
          #   AttributeType: S
        KeySchema:
          - AttributeName: tenant_id_key
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.table.user}
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: tenant_id_key
                KeyType: HASH
              # - AttributeName: user_name
              #   KeyType: RANGE
              # - AttributeName: user_alias
              #   KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
